package com.coreoz.plume.admin;

import java.util.function.Predicate;
import java.util.regex.Pattern;

import com.coreoz.plume.admin.services.logapi.LogInterceptApiBean;

import com.google.common.base.Strings;
import okhttp3.Request;
import okhttp3.Response;

/**
 * Represent an operation that transforms the trace generated by {@link OkHttpLoggerInterceptor}
 * <p>
 * This is a functional interface</a>
 * whose functional method is {@link #transform(Request, Response, LogInterceptApiBean)}.
 * <p>
 * The static method {@link #limitBodySizeTransformer(int)} transforms the body of either the request or the response
 * to be truncated at a given limit
 */
@FunctionalInterface
public interface LogEntryTransformer {
    LogInterceptApiBean transform(Request request, Response response, LogInterceptApiBean okhttpApiCallTrace);

    default LogEntryTransformer andApply(LogEntryTransformer otherTransformerToApplyAfter) {
        return (request, response, okhttpApiCallTrace) -> otherTransformerToApplyAfter
            .transform(request, response, transform(request, response, okhttpApiCallTrace));
    }

    private LogEntryTransformer jsonFieldTransformer(String regex, String replacement) {
        if (regex.isEmpty()) {
            return (request, response, okhttpApiCallTrace) -> okhttpApiCallTrace;
        } else {
            Pattern compiledRegex = Pattern.compile(regex);

            return (request, response, okhttpApiCallTrace) -> {
                if (!Strings.isNullOrEmpty(okhttpApiCallTrace.getBodyRequest())) {
                    okhttpApiCallTrace.setBodyRequest(
                        compiledRegex.matcher(okhttpApiCallTrace.getBodyRequest()).replaceAll(replacement)
                    );
                }
                if (!Strings.isNullOrEmpty(okhttpApiCallTrace.getBodyResponse())) {
                    okhttpApiCallTrace.setBodyResponse(
                        compiledRegex.matcher(okhttpApiCallTrace.getBodyResponse()).replaceAll(replacement)
                    );
                }
                return okhttpApiCallTrace;
            };
        }
    }

    default LogEntryTransformer hideJsonFields(String regex, String replacement) {
        return (request, response, okhttpApiCallTrace) -> this.jsonFieldTransformer(regex, replacement)
            .transform(request, response, transform(request, response, okhttpApiCallTrace));
    }

    default LogEntryTransformer applyOnlyToRequests(RequestPredicate allowRequestPredicate) {
        return (request, response, okhttpApiCallTrace) ->
            allowRequestPredicate.test(request) ?
                transform(request, response, okhttpApiCallTrace)
                : okhttpApiCallTrace;
    }

    default LogEntryTransformer applyOnlyToResponses(Predicate<Response> allowResponsePredicate) {
        return (request, response, okhttpApiCallTrace) ->
            allowResponsePredicate.test(response) ?
                transform(request, response, okhttpApiCallTrace)
                : okhttpApiCallTrace;
    }

    default LogEntryTransformer applyOnlyToResponsesWithHeader(String headerName, String headerValue) {
        return applyOnlyToResponses(
            response -> OkHttpMatchers.matchResponseHeaders(response.headers(), headerName, headerValue)
        );
    }

    static LogEntryTransformer limitBodySizeTransformer(int bodyCharLengthLimit) {
        return (request, response, okhttpApiCallTrace) -> {
            if (bodyCharLengthLimit < 0) {
                return okhttpApiCallTrace;
            }
            String bodyRequest = okhttpApiCallTrace.getBodyRequest();
            if (bodyRequest != null && bodyRequest.length() > bodyCharLengthLimit) {
                okhttpApiCallTrace.setBodyRequest(bodyRequest.substring(0, bodyCharLengthLimit));
            }
            String bodyResponse = okhttpApiCallTrace.getBodyResponse();
            if (bodyResponse != null && bodyResponse.length() > bodyCharLengthLimit) {
                okhttpApiCallTrace.setBodyResponse(bodyResponse.substring(0, bodyCharLengthLimit));
            }
            return okhttpApiCallTrace;
        };
    }

    static LogEntryTransformer emptyTransformer() {
        return (request, response, okhttpApiCallTrace) -> okhttpApiCallTrace;
    }
}
