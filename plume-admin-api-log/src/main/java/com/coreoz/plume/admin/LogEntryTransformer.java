package com.coreoz.plume.admin;

import java.util.List;
import java.util.Objects;
import java.util.function.Predicate;
import java.util.regex.Pattern;

import com.coreoz.plume.admin.services.logapi.LogInterceptApiBean;

import com.google.common.base.Strings;
import okhttp3.Request;
import okhttp3.Response;

/**
 * Represent an operation that transforms the trace generated by {@link OkHttpLoggerInterceptor}
 * <p>This is a <a href="package-summary.html">functional interface</a>
 * whose functional method is {@link #transform(Request, Response, LogInterceptApiBean)}.
 *
 * <p>The static method {@link #emptyTransformer()} initiates the transformer
 */
@FunctionalInterface
public interface LogEntryTransformer {
    LogInterceptApiBean transform(Request request, Response response, LogInterceptApiBean apiLogEntry);

    default LogEntryTransformer andApply(LogEntryTransformer otherTransformerToApplyAfter) {
        return (request, response, apiLogEntry) -> otherTransformerToApplyAfter
            .transform(request, response, transform(request, response, apiLogEntry));
    }

    default LogEntryTransformer applyOnlyToRequests(RequestPredicate allowRequestPredicate) {
        return (request, response, apiLogEntry) ->
            allowRequestPredicate.test(request) ?
                transform(request, response, apiLogEntry)
                : apiLogEntry;
    }

    default LogEntryTransformer applyOnlyToResponses(Predicate<Response> allowResponsePredicate) {
        return (request, response, apiLogEntry) ->
            allowResponsePredicate.test(response) ?
                transform(request, response, apiLogEntry)
                : apiLogEntry;
    }

    default LogEntryTransformer applyOnlyToResponsesWithHeader(String headerName, String headerValue) {
        return applyOnlyToResponses(
            response -> OkHttpMatchers.matchResponseHeaders(response.headers(), headerName, headerValue)
        );
    }

    /**
     * This static method transforms the body of either the request or the response
     * to be truncated to a given limit
     * @param bodyCharLengthLimit : the limit of the body to be applied
     * @return the corresponding {@link LogEntryTransformer}
     */
    static LogEntryTransformer limitBodySizeTransformer(int bodyCharLengthLimit) {
        return (request, response, apiLogEntry) -> {
            if (bodyCharLengthLimit < 0) {
                return apiLogEntry;
            }
            String bodyRequest = apiLogEntry.getBodyRequest();
            if (bodyRequest != null && bodyRequest.length() > bodyCharLengthLimit) {
                apiLogEntry.setBodyRequest(bodyRequest.substring(0, bodyCharLengthLimit));
            }
            String bodyResponse = apiLogEntry.getBodyResponse();
            if (bodyResponse != null && bodyResponse.length() > bodyCharLengthLimit) {
                apiLogEntry.setBodyResponse(bodyResponse.substring(0, bodyCharLengthLimit));
            }
            return apiLogEntry;
        };
    }

    /**
     * This static method transforms the body of either the request or the response
     * to replace values of given object keys through a regex matcher
     * @param jsonFieldKeysToHide : a list of keys whose value needs to be hidden
     * @param replacement : the replacement for the hidden values
     * @return the corresponding {@link LogEntryTransformer}
     */
    static LogEntryTransformer hideJsonFields(List<String> jsonFieldKeysToHide, String replacement) {
        Objects.requireNonNull(jsonFieldKeysToHide);
        Objects.requireNonNull(replacement);

        if (jsonFieldKeysToHide.isEmpty()) {
            return LogEntryTransformer.emptyTransformer();
        }

        Pattern compiledRegex = Pattern.compile(RegexBuilder.regexHidingFields(jsonFieldKeysToHide));

        return (request, response, apiLogEntry) -> {
            if (!Strings.isNullOrEmpty(apiLogEntry.getBodyRequest())) {
                apiLogEntry.setBodyRequest(
                    compiledRegex.matcher(apiLogEntry.getBodyRequest()).replaceAll(replacement)
                );
            }
            if (!Strings.isNullOrEmpty(apiLogEntry.getBodyResponse())) {
                apiLogEntry.setBodyResponse(
                    compiledRegex.matcher(apiLogEntry.getBodyResponse()).replaceAll(replacement)
                );
            }
            return apiLogEntry;
        };
    }

    /**
     * This static method nullifies the body of both request and response
     * @return the corresponding {@link LogEntryTransformer}
     */
    static LogEntryTransformer emptyBody() {
        return (request, response, apiLogEntry) -> {
            apiLogEntry.setBodyRequest(null);
            apiLogEntry.setBodyResponse(null);
            return apiLogEntry;
        };
    }

    static LogEntryTransformer emptyTransformer() {
        return (request, response, apiLogEntry) -> apiLogEntry;
    }
}
