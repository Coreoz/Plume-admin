package com.coreoz.plume.admin;

import com.coreoz.plume.admin.services.logapi.LogInterceptApiBean;
import okhttp3.Request;
import okhttp3.Response;

/**
 * Represent an operation that transforms the trace generated by {@link OkHttpLoggerInterceptor}
 *
 * This is a functional interface</a>
 * whose functional method is {@link #transform(Request, Response, LogInterceptApiBean)}.
 *
 * The static method {@link #limitBodySizeTransformer(int)} transforms the body of either the request or the response
 * to be truncated at a given limit
 *
 */
@FunctionalInterface
public interface LogEntryTransformer {
    LogInterceptApiBean transform(Request request, Response response, LogInterceptApiBean trace);

    static LogEntryTransformer limitBodySizeTransformer(int bodyCharLengthLimit) {
        return (request, response, apiTrace) -> {
            if (bodyCharLengthLimit < 0) {
                return apiTrace;
            }
            if(apiTrace.getBodyRequest().length() > bodyCharLengthLimit) {
                apiTrace.setBodyRequest(apiTrace.getBodyRequest().substring(0, bodyCharLengthLimit));
            }
            if(apiTrace.getBodyResponse().length() > bodyCharLengthLimit) {
                apiTrace.setBodyResponse(apiTrace.getBodyResponse().substring(0, bodyCharLengthLimit));
            }
            return apiTrace;
        };
    }
}
